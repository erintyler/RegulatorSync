name: Build Auth Service Docker Image

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'Regulator.Client/**'
      - 'Regulator.Services.Sync/**'
      - 'Regulator.Services.Sync.Shared/**'
      - '.github/workflows/**'
      - 'ecs/sync-task-definition.json'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'Regulator.Client/**'
      - 'Regulator.Services.Sync/**'
      - 'Regulator.Services.Sync.Shared/**'

jobs:
  build-docker:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::886436922604:role/github-actions-role
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build Docker image
        run: |
          docker build -f Regulator.Services.Auth/Dockerfile -t regulator/auth-service:${{ github.sha }} .
      - name: Tag Docker image for ECR
        run: |
          docker tag regulator/auth-service:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/regulator/auth-service:${{ github.sha }}
      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/regulator/auth-service:${{ github.sha }}
      - name: Save Docker image as tarball
        run: |
          docker save -o auth-service-image.tar regulator/auth-service:${{ github.sha }}
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: auth-service-image
          path: auth-service-image.tar

  deploy-ecs:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::886436922604:role/github-actions-role
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Render Amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs/auth-task-definition.json
          container-name: auth-service
          image: ${{ steps.login-ecr.outputs.registry }}/regulator/auth-service:${{ github.sha }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: auth-service
          cluster: neurilink-ecs
          wait-for-service-stability: true
          wait-for-minutes: 5
